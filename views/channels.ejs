<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Gestión de Canales</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/video.js/7.20.3/video-js.min.css" rel="stylesheet">
    <style>
        :root {
            --primary-color: #2563eb;
            --danger-color: #dc2626;
            --success-color: #16a34a;
            --warning-color: #ca8a04;
            --background-color: #f8fafc;
            --card-background: #ffffff;
            --text-color: #1e293b;
            --border-color: #e2e8f0;
        }

        body {
            font-family: 'Inter', system-ui, -apple-system, sans-serif;
            background-color: var(--background-color);
            color: var(--text-color);
            line-height: 1.5;
            margin: 0;
        }

        header {
            background-color: var(--card-background);
            padding: 1.5rem;
            box-shadow: 0 1px 3px rgba(0,0,0,0.1);
            position: sticky;
            top: 0;
            z-index: 10;
        }

        .header-content {
            max-width: 1200px;
            margin: 0 auto;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .header-title {
            font-size: 1.5rem;
            font-weight: 600;
        }

        main {
            max-width: 1200px;
            margin: 2rem auto;
            padding: 0 1rem;
        }

        .control-panel {
            background-color: var(--card-background);
            padding: 1.5rem;
            border-radius: 0.5rem;
            box-shadow: 0 1px 3px rgba(0,0,0,0.1);
            margin-bottom: 2rem;
            display: flex;
            gap: 1rem;
            justify-content: center;
        }

        .btn {
            padding: 0.75rem 1.5rem;
            border-radius: 0.375rem;
            border: none;
            font-weight: 500;
            cursor: pointer;
            display: flex;
            align-items: center;
            gap: 0.5rem;
            transition: all 0.2s;
        }

        .btn-primary {
            background-color: var(--primary-color);
            color: white;
        }

        .btn-success {
            background-color: var(--success-color);
            color: white;
        }

        .btn-danger {
            background-color: var(--danger-color);
            color: white;
        }

        .btn:hover {
            opacity: 0.9;
            transform: translateY(-1px);
        }

        .channels-grid {
            display: grid;
            gap: 1.5rem;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
        }

        .channel-card {
            background-color: var(--card-background);
            border-radius: 0.5rem;
            padding: 1.5rem;
            box-shadow: 0 1px 3px rgba(0,0,0,0.1);
        }

        .channel-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1rem;
        }

        .channel-title {
            font-size: 1.25rem;
            font-weight: 600;
        }

        .channel-status {
            font-size: 0.875rem;
            padding: 0.25rem 0.75rem;
            border-radius: 9999px;
            font-weight: 500;
        }

        .status-running {
            background-color: #dcfce7;
            color: var(--success-color);
        }

        .status-stopped {
            background-color: #fee2e2;
            color: var(--danger-color);
        }

        .video-container {
            position: relative;
            padding-top: 56.25%; /* 16:9 Aspect Ratio */
            width: 100%;
            border-radius: 0.5rem;
            overflow: hidden;
            background: #000;
        }

        .video-js {
            position: absolute;
            top: 0;
            left: 0;
            width: 100% !important;
            height: 100% !important;
        }

        @media (min-width: 768px) {
            .channels-grid {
                grid-template-columns: repeat(2, 1fr);
            }
        }

        @media (min-width: 1024px) {
            .channels-grid {
                grid-template-columns: repeat(3, 1fr);
            }
        }
    </style>
</head>

<body>
    <header>
        <div class="header-content">
            <h1 class="header-title">Gestión de Canales</h1>
        </div>
    </header>

    <main>
        <section class="control-panel">
            <button class="btn btn-success" onclick="startAllPlayers()">
                <i class="fas fa-play"></i>
                Iniciar Todas las Transmisiones
            </button>

            <button class="btn btn-danger" onclick="stopAllPlayers()">
                <i class="fas fa-stop"></i>
                Detener Todas las Transmisiones
            </button>
        </section>

        <section class="channels-grid" id="channelsContainer">
            <!-- Los canales se agregarán dinámicamente aquí -->
        </section>
    </main>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/video.js/7.20.3/video.min.js"></script>
    <script>
        // Configuración de los canales
        const channels = [
            {
                name: "Canal 11",
                rtmpUrl: "rtmp://fluestabiliz.giize.com/costaCANAL11",
                status: "running"
            }
            // Agrega más canales aquí siguiendo el mismo formato
        ];

        // Función para convertir URL RTMP a HLS
        function convertRtmpToHls(rtmpUrl) {
            // Extrae el dominio y la ruta del RTMP
            const urlParts = rtmpUrl.replace('rtmp://', '').split('/');
            const domain = urlParts[0];
            const path = urlParts.slice(1).join('/');
            // Construye la URL HLS
            return `https://${domain}/${path}/index.m3u8`;
        }

        // Función para crear un canal
        function createChannelElement(channel, index) {
            const hlsUrl = convertRtmpToHls(channel.rtmpUrl);
            const channelHtml = `
                <div class="channel-card">
                    <div class="channel-header">
                        <h3 class="channel-title">${channel.name}</h3>
                    </div>
                    <div class="video-container">
                        <video
                            id="player-${index}"
                            class="video-js vjs-default-skin"
                            controls
                            preload="auto"
                        >
                            <source src="${hlsUrl}" type="application/x-mpegURL">
                        </video>
                    </div>
                </div>
            `;
            return channelHtml;
        }

        // Inicializar los canales
        function initializeChannels() {
            const container = document.getElementById('channelsContainer');
            let channelsHtml = '';
            
            channels.forEach((channel, index) => {
                channelsHtml += createChannelElement(channel, index);
            });
            
            container.innerHTML = channelsHtml;

            // Inicializar los reproductores de video
            channels.forEach((_, index) => {
                videojs(`player-${index}`, {
                    fluid: true,
                    autoplay: false,
                    preload: 'auto',
                    controls: true,
                    muted: true
                });
            });
        }

        // Funciones para controlar todos los reproductores
        function startAllPlayers() {
            channels.forEach((_, index) => {
                const player = videojs(`player-${index}`);
                player.play();
            });
        }

        function stopAllPlayers() {
            channels.forEach((_, index) => {
                const player = videojs(`player-${index}`);
                player.pause();
            });
        }

        // Inicializar cuando el documento esté listo
        document.addEventListener('DOMContentLoaded', initializeChannels);
    </script>
</body>
</html>