<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Gesti칩n de Canales de Streaming</title>
    
    <!-- Enlaces a CSS externos -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <link href="https://unpkg.com/video.js/dist/video-js.css" rel="stylesheet">
    <link href="https://unpkg.com/@videojs/themes@1/dist/city/index.css" rel="stylesheet">
    
    <!-- Estilos CSS propios -->
    <style>
        /* Variables de color y tema */
        :root {
            --primary-color: #2563eb;
            --danger-color: #dc2626;
            --success-color: #16a34a;
            --warning-color: #ca8a04;
            --background-color: #f8fafc;
            --card-background: #ffffff;
            --text-color: #1e293b;
            --border-color: #e2e8f0;
        }

        /* Estilos generales */
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Inter', system-ui, -apple-system, sans-serif;
            background-color: var(--background-color);
            color: var(--text-color);
            line-height: 1.5;
            min-height: 100vh;
        }

        /* Estilos del encabezado */
        header {
            background-color: var(--card-background);
            padding: 1.5rem;
            box-shadow: 0 1px 3px rgba(0,0,0,0.1);
            position: sticky;
            top: 0;
            z-index: 10;
        }

        .header-content {
            max-width: 1200px;
            margin: 0 auto;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .header-title {
            font-size: 1.5rem;
            font-weight: 600;
            color: var(--text-color);
        }

        /* Estilos del contenido principal */
        main {
            max-width: 1200px;
            margin: 2rem auto;
            padding: 0 1rem;
        }

        /* Panel de control */
        .control-panel {
            background-color: var(--card-background);
            padding: 1.5rem;
            border-radius: 0.5rem;
            box-shadow: 0 1px 3px rgba(0,0,0,0.1);
            margin-bottom: 2rem;
            display: flex;
            gap: 1rem;
            justify-content: center;
            flex-wrap: wrap;
        }

        /* Estilos de botones */
        .btn {
            padding: 0.75rem 1.5rem;
            border-radius: 0.375rem;
            border: none;
            font-weight: 500;
            cursor: pointer;
            display: flex;
            align-items: center;
            gap: 0.5rem;
            transition: all 0.2s ease;
            font-size: 0.875rem;
        }

        .btn-primary {
            background-color: var(--primary-color);
            color: white;
        }

        .btn-success {
            background-color: var(--success-color);
            color: white;
        }

        .btn-danger {
            background-color: var(--danger-color);
            color: white;
        }

        .btn:hover {
            opacity: 0.9;
            transform: translateY(-1px);
        }

        .btn:active {
            transform: translateY(0);
        }

        /* Grid de canales */
        .channels-grid {
            display: grid;
            gap: 1.5rem;
            grid-template-columns: 1fr;
        }

        /* Tarjeta de canal */
        .channel-card {
            background-color: var(--card-background);
            border-radius: 0.5rem;
            padding: 1.5rem;
            box-shadow: 0 1px 3px rgba(0,0,0,0.1);
            transition: transform 0.2s ease;
        }

        .channel-card:hover {
            transform: translateY(-2px);
        }

        .channel-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1rem;
        }

        .channel-title {
            font-size: 1.25rem;
            font-weight: 600;
            color: var(--text-color);
        }

        /* Indicadores de estado */
        .channel-status {
            font-size: 0.875rem;
            padding: 0.25rem 0.75rem;
            border-radius: 9999px;
            font-weight: 500;
        }

        .status-running {
            background-color: #dcfce7;
            color: var(--success-color);
        }

        .status-stopped {
            background-color: #fee2e2;
            color: var(--danger-color);
        }

        /* Contenedor de video */
        .video-container {
            width: 100%;
            aspect-ratio: 16/9;
            margin-bottom: 1rem;
            border-radius: 0.5rem;
            overflow: hidden;
            background-color: #000;
        }

        /* Estilos del reproductor de video */
        .video-js {
            width: 100%;
            height: 100%;
        }

        .video-js .vjs-big-play-button {
            background-color: rgba(37, 99, 235, 0.8);
            border: none;
            border-radius: 50%;
            width: 60px;
            height: 60px;
            line-height: 60px;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
        }

        .video-js:hover .vjs-big-play-button {
            background-color: var(--primary-color);
        }

        .video-js .vjs-control-bar {
            background-color: rgba(0, 0, 0, 0.7);
        }

        .video-js .vjs-slider {
            background-color: rgba(255, 255, 255, 0.3);
        }

        .video-js .vjs-play-progress {
            background-color: var(--primary-color);
        }

        /* Dise침o responsivo */
        @media (min-width: 640px) {
            .channels-grid {
                grid-template-columns: repeat(1, 1fr);
            }
        }

        @media (min-width: 768px) {
            .channels-grid {
                grid-template-columns: repeat(2, 1fr);
            }
        }

        @media (min-width: 1024px) {
            .channels-grid {
                grid-template-columns: repeat(3, 1fr);
            }
        }

        /* Estilos para mensajes de error */
        .error-message {
            background-color: #fee2e2;
            color: var(--danger-color);
            padding: 0.75rem;
            border-radius: 0.375rem;
            margin-top: 0.5rem;
            font-size: 0.875rem;
        }

        /* Estilos para el loader */
        .loading-spinner {
            width: 100%;
            height: 100%;
            display: flex;
            justify-content: center;
            align-items: center;
            background-color: rgba(0, 0, 0, 0.5);
        }

        .loading-spinner::after {
            content: '';
            width: 40px;
            height: 40px;
            border: 4px solid #f3f3f3;
            border-top: 4px solid var(--primary-color);
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
    </style>
</head>

<body>
    <!-- Encabezado -->
    <header>
        <div class="header-content">
            <h1 class="header-title">Gesti칩n de Canales</h1>
        </div>
    </header>

    <main>
        <!-- Panel de controles globales -->
        <section class="control-panel">
            <form action="/channels/startAll" method="POST">
                <button type="submit" class="btn btn-success">
                    <i class="fas fa-play"></i>
                    Iniciar Todas las Transmisiones
                </button>
            </form>

            <form action="/channels/stopAll" method="POST">
                <button type="submit" class="btn btn-danger">
                    <i class="fas fa-stop"></i>
                    Detener Todas las Transmisiones
                </button>
            </form>
        </section>

        <!-- Grid de canales -->
        <section class="channels-grid">
            <% channels.forEach((channel, index) => { %>
                <div class="channel-card">
                    <div class="channel-header">
                        <h3 class="channel-title"><%= channel.name %></h3>
                        <span class="channel-status <%= channel.status === 'running' ? 'status-running' : 'status-stopped' %>">
                            <%= channel.status === 'running' ? 'Transmitiendo' : 'Detenido' %>
                        </span>
                    </div>

                    <div class="video-container">
                        <video
                            id="video-<%= index %>"
                            class="video-js vjs-theme-city"
                            controls
                            preload="auto"
                            data-setup='{"fluid": true, "liveui": true}'
                        >
                            <source src="<%= channel.rtmp_url %>" type="rtmp/mp4">
                            <p class="vjs-no-js">
                                Para ver esta transmisi칩n, por favor habilite JavaScript y considere actualizar a un
                                navegador que soporte HTML5 video
                            </p>
                        </video>
                    </div>

                    <div class="channel-controls">
                        <form action="/channels/<%= channel.id %>/start" method="POST" style="display: inline;">
                            <button type="submit" class="btn btn-success">
                                <i class="fas fa-play"></i>
                                Iniciar
                            </button>
                        </form>
                        <form action="/channels/<%= channel.id %>/stop" method="POST" style="display: inline;">
                            <button type="submit" class="btn btn-danger">
                                <i class="fas fa-stop"></i>
                                Detener
                            </button>
                        </form>
                    </div>
                </div>
            <% }); %>
        </section>
    </main>

    <!-- Scripts -->
    <script src="https://unpkg.com/video.js/dist/video.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/videojs-flash/2.2.1/videojs-flash.min.js"></script>
    
    <script>
        // Configuraci칩n y inicializaci칩n de los reproductores
        document.addEventListener('DOMContentLoaded', function() {
            // Registramos el plugin Flash para RTMP
            videojs.options.flash.swf = 'https://unpkg.com/videojs-flash/dist/video-js.swf';
            
            // Inicializamos cada reproductor
            const players = document.querySelectorAll('.video-js');
            const videoPlayers = [];

            players.forEach((player, index) => {
                const videoPlayer = videojs(`video-${index}`, {
                    techOrder: ['flash', 'html5'],
                    autoplay: false,
                    controls: true,
                    fluid: true,
                    liveui: true,
                    width: 640,
                    height: 360,
                    controlBar: {
                        playToggle: true,
                        volumePanel: true,
                        currentTimeDisplay: true,
                        timeDivider: true,
                        durationDisplay: true,
                        progressControl: true,
                        fullscreenToggle: true
                    }
                });

                // Manejamos el evento de carga
                videoPlayer.on('loadstart', function() {
                    console.log(`Cargando stream para el reproductor ${index}`);
                });

                // Manejamos el evento de reproducci칩n
                videoPlayer.on('playing', function() {
                    console.log(`Reproduciendo stream en el reproductor ${index}`);
                });

                // Manejamos errores
                videoPlayer.on('error', function() {
                    console.error(`Error en el reproductor ${index}:`, videoPlayer.error());
                    const errorDiv = document.createElement('div');
                    errorDiv.className = 'error-message';
                    errorDiv.textContent = 'Error al cargar la transmisi칩n. Por favor, intente nuevamente.';
                    player.parentNode.appendChild(errorDiv);
                });

                // Almacenamos la referencia al reproductor
                videoPlayers.push(videoPlayer);
            });

            // Funci칩n para detener todos los reproductores
            window.stopAllPlayers = function() {
                videoPlayers.forEach(player => {
                    player.pause();
                });
            };

            // Manejamos el evento de cierre de la ventana
            window.addEventListener('beforeunload', function() {
                videoPlayers.forEach(player => {
                    player.dispose();
                });
            });
        });

        // Funci칩n para recargar un reproductor espec칤fico
        function reloadPlayer(index) {
            const player = videojs(`video-${index}`);
            player.pause();
            player.src(player.currentSrc());
            player.load();
            player.play();
        }

        // Funci칩n para alternar pantalla completa
        function toggleFullscreen(index) {
            const player = videojs(`video-${index}`);
            if (player.isFullscreen()) {
                player.exitFullscreen();
            } else {
                player.requestFullscreen();
            }
        }
    </script>
</body>
</html>